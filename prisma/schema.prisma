generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String?         @unique
  passwordHash   String?
  firstName      String?
  lastName       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  emailVerified  Boolean?
  image          String?
  name           String?
  accounts       Account[]
  favoriteMovies FavoriteMovie[]
  favoriteShows  FavoriteShow[]
  sessions       Session[]
  toWatchMovies  ToWatchMovie[]
  toWatchShows   ToWatchShow[]
}

model FavoriteMovie {
  id      Int   @id @default(autoincrement())
  userId  Int
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
}

model FavoriteShow {
  id     Int  @id @default(autoincrement())
  userId Int
  showId Int
  show   Show @relation(fields: [showId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model ToWatchMovie {
  id      Int   @id @default(autoincrement())
  userId  Int
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
}

model ToWatchShow {
  id     Int  @id @default(autoincrement())
  userId Int
  showId Int
  show   Show @relation(fields: [showId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model Movie {
  id          Int             @id
  title       String
  overview    String
  releaseDate DateTime
  favorites   FavoriteMovie[]
  toWatch     ToWatchMovie[]
}

model Show {
  id           Int            @id @default(autoincrement())
  name         String
  overview     String
  firstAirDate DateTime
  favorites    FavoriteShow[]
  toWatch      ToWatchShow[]
}

model Message {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  acceptPolicy Boolean
  email        String
  firstName    String
  lastName     String
  phoneNumber  String?
  subject      String
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
