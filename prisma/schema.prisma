generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String?        @unique
  passwordHash     String?
  firstName        String?
  lastName         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(true)
  emailVerified    Boolean?
  image            String?
  name             String?

  // Relacja do subskrypcji (tablica, bo użytkownik może mieć więcej niż jedną subskrypcję)
  subscriptions    Subscription[] // Relacja do modelu Subscription
  accounts         Account[]      // Powiązane konta
  favoriteMovies   FavoriteMovie[] 
  favoriteShows    FavoriteShow[] 
  toWatchMovies    ToWatchMovie[] 
  toWatchShows     ToWatchShow[] 
  movieRating      MovieRating[]  
  showRating       ShowRating[]   
}


model Plan {
  id            Int  @id @default(autoincrement())
  name          String
  description   String
  monthlyPrice  Float
  yearlyPrice   Float
  monthlyPaymentLink String
  yearlyPaymentLink String
  trialMonthlyPaymentLink String  @default("link")
  trialYearlyPaymentLink String @default("link")
  monthlyPriceId String
  yearlyPriceId String
  content       String
  devicesNumber Int
  trialPeriod   Int
  cancelAllowed Boolean
  HDR           Boolean
  DolbyAtmos    Boolean
  adsFree       Boolean
  offlineView   Boolean
  familySharing Boolean
  popular       Boolean  
  subscriptions    Subscription[]   // Odwrotna relacja

}

model Subscription {
  id               Int       @id @default(autoincrement()) // Unikalny identyfikator subskrypcji
  stripeSubscriptionId String?
  userId           Int       // Identyfikator użytkownika (relacja do tabeli User)
  planId   Int    // Identyfikator planu subskrypcji (relacja do tabeli Plan)
  subscriptionStart DateTime  // Data rozpoczęcia subskrypcji
  subscriptionEnd   DateTime  // Data zakończenia subskrypcji
  interval          String   @default("month") // Domyślny interwał
  status           String    // Status subskrypcji, np. 'active', 'expired'
  isPaid           Boolean   // Czy subskrypcja jest opłacona?
  trialPeriod      Boolean   // Czy subskrypcja jest w okresie próbnym?
  trialPeriodEnd    DateTime?
  createdAt        DateTime  @default(now()) // Data utworzenia subskrypcji
  updatedAt        DateTime  @updatedAt       // Data ostatniej aktualizacji subskrypcji
  
  // Relacje
  user             User      @relation(fields: [userId], references: [id]) // Relacja do użytkownika
  plan             Plan      @relation(fields: [planId], references: [id]) // Relacja do planu
}



model FavoriteMovie {
  id      Int   @id @default(autoincrement())
  userId  Int
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FavoriteShow {
  id     Int  @id @default(autoincrement())
  userId Int
  showId Int
  show   Show @relation(fields: [showId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ToWatchMovie {
  id      Int   @id @default(autoincrement())
  userId  Int
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ToWatchShow {
  id     Int  @id @default(autoincrement())
  userId Int
  showId Int
  show   Show @relation(fields: [showId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MovieRating {
  id       Int    @id @default(autoincrement())
  userId   Int
  movieId  Int
  rating   Float
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
}

model ShowRating {
  id       Int    @id @default(autoincrement())
  userId   Int
  showId   Int
  rating   Float
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  show     Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, showId])
}

model Movie {
  id          Int             @id
  title       String
  overview    String
  releaseDate DateTime
  posterPath String?
  favorites   FavoriteMovie[]
  toWatch     ToWatchMovie[]
  movieRating MovieRating[]
}

model Show {
  id           Int            @id @default(autoincrement())
  name         String
  overview     String
  firstAirDate DateTime
  posterPath String?           
  favorites    FavoriteShow[]
  toWatch      ToWatchShow[]
  showRating   ShowRating[]
}

model Message {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  acceptPolicy Boolean
  email        String
  firstName    String
  lastName     String
  phoneNumber  String?
  subject      String
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id String @id @default(cuid())
  email String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

